name: Build and Deploy Docker Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install UV
      run: pip install uv

    - name: Install dependencies
      run: uv sync

    - name: Run basic syntax check
      run: uv run python -m py_compile src/booking/__init__.py

    # Add more tests here as they become available
    # - name: Run tests
    #   run: uv run pytest

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate deployment artifacts
      if: github.event_name != 'pull_request'
      run: |
        # Create deployment directory
        mkdir -p deployment
        
        # Generate docker-compose.prod.yml for deployment
        cat > deployment/docker-compose.prod.yml << EOF
        version: '3.8'
        
        services:
          booking-app:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ports:
              - "8000:8000"
            environment:
              - SECRET_KEY=\${SECRET_KEY}
              - DATABASE_URL=sqlite:///./data/booking.db
              - DEFAULT_TIMEZONE=\${DEFAULT_TIMEZONE:-UTC}
            volumes:
              - booking_data:/app/data
              - booking_logs:/app/logs
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8000/api/oidc/providers"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
        
        volumes:
          booking_data:
          booking_logs:
        EOF
        
        # Generate deployment script
        cat > deployment/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "ðŸš€ Deploying Booking Application..."
        
        # Pull latest image
        docker-compose -f docker-compose.prod.yml pull
        
        # Stop and remove old containers
        docker-compose -f docker-compose.prod.yml down
        
        # Start new containers
        docker-compose -f docker-compose.prod.yml up -d
        
        # Show status
        docker-compose -f docker-compose.prod.yml ps
        
        echo "âœ… Deployment completed!"
        echo "ðŸ“± Application available at: http://localhost:8000"
        echo "ðŸ”§ Admin panel at: http://localhost:8000/static/admin.html"
        EOF
        
        chmod +x deployment/deploy.sh

    - name: Upload deployment artifacts
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: deployment-artifacts
        path: deployment/

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: build
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
